#!/usr/bin/env python3
import http.server
import socketserver
import json
import urllib.request
import urllib.parse
import threading
import time
from datetime import datetime
import os

# Configuración
API_KEY = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiIsImtpZCI6IjI4YTMxOGY3LTAwMDAtYTFlYi03ZmExLTJjNzQzM2M2Y2NhNSJ9.eyJpc3MiOiJzdXBlcmNlbGwiLCJhdWQiOiJzdXBlcmNlbGw6Z2FtZWFwaSIsImp0aSI6IjQ0MmM5NDI3LWRmZWUtNDUzOS05YzM3LTY0YTI4ZWQ3NWQ2YSIsImlhdCI6MTc1NDc4NzA4NCwic3ViIjoiZGV2ZWxvcGVyL2ZjNTE2YWY0LTA4YzUtYTUwYS1iNjA1LTA0NWJiN2Y2MWYxNyIsInNjb3BlcyI6WyJjbGFzaCJdLCJsaW1pdHMiOlt7InRpZXIiOiJkZXZlbG9wZXIvc2lsdmVyIiwidHlwZSI6InRocm90dGxpbmcifSx7ImNpZHJzIjpbIjE5MC40OC4xMTkuMTAwIl0sInR5cGUiOiJjbGllbnQifV19.wX0TqtjSP7HUxVs9cvopoFZk_5wp-fG70HOrQaF-EOBKgUUBYXySAU7GMfnOx8ivnqB3qgKv-Urb_S79dBEpQw"
CLAN_TAG = "#22G8YL992"
PORT = 8080

# Variables globales
clan_data = None
previous_donations = {}
last_update = None

# HTML de la página (insertamos el HTML completo aquí)
HTML_PAGE = """<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TOP REQ CLANS</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background: linear-gradient(135deg, #87CEEB 0%, #E6F3FF 100%);
            min-height: 100vh;
        }

        .header {
            background: linear-gradient(90deg, #FF6B35 0%, #F7931E 50%, #DC143C 100%);
            color: white;
            padding: 15px 0;
            text-align: center;
        }

        .header h1 {
            font-size: 24px;
            font-weight: bold;
            letter-spacing: 2px;
        }

        .nav-menu {
            background: rgba(0,0,0,0.8);
            padding: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-items {
            display: flex;
            gap: 20px;
        }

        .nav-items a {
            color: white;
            text-decoration: none;
            font-size: 14px;
        }

        .container {
            max-width: 800px;
            margin: 20px auto;
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 4px 15px rgba(0,0,0,0.1);
        }

        .clan-header {
            display: flex;
            align-items: center;
            padding: 20px;
            border-bottom: 2px solid #eee;
        }

        .clan-badge {
            width: 80px;
            height: 80px;
            background: linear-gradient(45deg, #8B4CB8, #6A1B9A);
            border-radius: 15px;
            margin-right: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .clan-badge:hover {
            transform: scale(1.05);
        }

        .clan-info h2 {
            font-size: 20px;
            color: #333;
            margin-bottom: 5px;
        }

        .clan-tag {
            color: #666;
            font-size: 14px;
        }

        .leader-info {
            text-align: right;
            flex-grow: 1;
        }

        .leader-info h3 {
            color: #333;
            font-size: 16px;
            margin-bottom: 5px;
        }

        .leader-tag {
            color: #666;
            font-size: 14px;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1px;
            background: #ddd;
            margin: 20px;
        }

        .stat-item {
            background: white;
            padding: 15px;
            text-align: center;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-bottom: 5px;
        }

        .stat-value {
            font-size: 18px;
            font-weight: bold;
            color: #333;
        }

        .clan-description {
            background: #f8f9fa;
            padding: 20px;
            margin: 20px;
            border-radius: 8px;
            text-align: center;
        }

        .clan-description h3 {
            color: #333;
            margin-bottom: 10px;
        }

        .clan-description p {
            color: #666;
            line-height: 1.4;
            font-size: 14px;
        }

        .donations-section {
            padding: 20px;
        }

        .section-title {
            font-size: 18px;
            font-weight: bold;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
        }

        .countdown-timer {
            text-align: center;
            color: #666;
            margin-bottom: 15px;
            font-size: 14px;
        }

        .donation-totals {
            background: linear-gradient(90deg, #4CAF50, #45a049);
            color: white;
            padding: 12px;
            border-radius: 8px;
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .tab-buttons {
            display: flex;
            margin-bottom: 20px;
            border-radius: 5px;
            overflow: hidden;
        }

        .tab-btn {
            flex: 1;
            padding: 12px;
            border: none;
            background: #ddd;
            cursor: pointer;
            font-size: 14px;
        }

        .tab-btn.active {
            background: #4CAF50;
            color: white;
        }

        .player-list {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
        }

        .player-header {
            background: #f5f5f5;
            padding: 10px;
            display: grid;
            grid-template-columns: 40px 40px 60px 2fr 1fr 1fr;
            gap: 10px;
            font-weight: bold;
            font-size: 12px;
            color: #666;
            align-items: center;
        }

        .player-row {
            padding: 12px 10px;
            display: grid;
            grid-template-columns: 40px 40px 60px 2fr 1fr 1fr;
            gap: 10px;
            align-items: center;
            border-bottom: 1px solid #eee;
        }

        .player-row:last-child {
            border-bottom: none;
        }

        .player-rank {
            font-weight: bold;
            color: #333;
            text-align: center;
        }

        .league-badge {
            width: 35px;
            height: 35px;
            background: linear-gradient(45deg, #40E0D0, #00CED1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 10px;
            font-weight: bold;
        }

        .level-badge {
            background: linear-gradient(45deg, #40E0D0, #00CED1);
            color: white;
            padding: 4px 8px;
            border-radius: 15px;
            font-size: 11px;
            font-weight: bold;
            text-align: center;
        }

        .player-name {
            font-weight: bold;
            color: #333;
        }

        .player-tag {
            color: #666;
            font-size: 11px;
        }

        .donation-amount {
            font-weight: bold;
            color: #333;
            text-align: right;
        }

        .received-amount {
            color: #666;
            text-align: right;
        }

        .menu-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            z-index: 1000;
        }

        .menu-content {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            min-width: 300px;
        }

        .menu-title {
            font-size: 24px;
            color: #333;
            margin-bottom: 30px;
        }

        .menu-button {
            display: block;
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            background: linear-gradient(45deg, #8B4CB8, #6A1B9A);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: transform 0.2s;
        }

        .menu-button:hover {
            transform: translateY(-2px);
        }

        .close-btn {
            position: absolute;
            top: 10px;
            right: 15px;
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #999;
        }

        .back-btn {
            position: fixed;
            top: 20px;
            left: 20px;
            background: rgba(139, 76, 184, 0.9);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            font-size: 14px;
            z-index: 100;
        }

        .checkbox-container {
            margin: 15px 0;
            text-align: center;
        }

        .checkbox-container input {
            margin-right: 8px;
        }

        .hidden {
            display: none !important;
        }

        .status-indicator {
            position: fixed;
            top: 10px;
            right: 10px;
            padding: 5px 10px;
            border-radius: 15px;
            font-size: 12px;
            z-index: 1000;
        }

        .status-online {
            background: #4CAF50;
            color: white;
        }

        .status-offline {
            background: #f44336;
            color: white;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <!-- Indicador de estado -->
    <div id="statusIndicator" class="status-indicator status-online">● Online</div>

    <!-- Botón de regreso -->
    <button class="back-btn hidden" onclick="showHome()">← Volver</button>

    <!-- Página Principal -->
    <div id="homePage">
        <div class="header">
            <h1>TOP REQ CLANS</h1>
        </div>
        <div class="nav-menu">
            <div class="nav-items">
                <a href="#">Level</a>
                <a href="#">Clans ▼</a>
                <a href="#">Players ▼</a>
                <a href="#">Contact</a>
            </div>
        </div>

        <div class="container">
            <div class="clan-header">
                <div class="clan-badge" onclick="showMenu()" title="Hacer click para ver opciones">
                    ⚔️
                </div>
                <div class="clan-info">
                    <h2 id="clanName">Cargando...</h2>
                    <div class="clan-tag" id="clanTag">#22G8YL992</div>
                </div>
                <div class="leader-info">
                    <h3>Líder:</h3>
                    <div id="leaderName">Cargando...</div>
                    <div class="leader-tag" id="leaderTag">Cargando...</div>
                </div>
            </div>

            <div class="stats-grid">
                <div class="stat-item">
                    <div class="stat-label">Puntos totales (aldea)</div>
                    <div class="stat-value" id="clanPoints">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Puntos base del constructor</div>
                    <div class="stat-value" id="builderPoints">0</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Ubicación del clan</div>
                    <div class="stat-value" id="clanLocation">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Trofeos requeridos</div>
                    <div class="stat-value" id="requiredTrophies">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Idioma del chat</div>
                    <div class="stat-value" id="chatLanguage">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Nivel TH requerido</div>
                    <div class="stat-value" id="requiredTownHall">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Tipo</div>
                    <div class="stat-value" id="clanType">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Frecuencia de guerra</div>
                    <div class="stat-value" id="warFrequency">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Guerras ganadas</div>
                    <div class="stat-value" id="warWins">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Racha de victorias en la guerra</div>
                    <div class="stat-value" id="warWinStreak">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">Nivel del Capitolio</div>
                    <div class="stat-value" id="capitalLevel">Cargando...</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">-</div>
                    <div class="stat-value">-</div>
                </div>
            </div>

            <div class="clan-description">
                <h3>Descripción del clan</h3>
                <p id="clanDescription">Cargando...</p>
            </div>
        </div>
    </div>

    <!-- Página de Donaciones Totales -->
    <div id="totalDonationsPage" class="hidden">
        <div class="header">
            <h1>TOP REQ CLANS</h1>
        </div>
        <div class="nav-menu">
            <div class="nav-items">
                <a href="#">Level</a>
                <a href="#">Clans ▼</a>
                <a href="#">Players ▼</a>
                <a href="#">Contact</a>
            </div>
        </div>

        <div class="container">
            <div class="clan-header">
                <div class="clan-badge">⚔️</div>
                <div class="clan-info">
                    <h2 id="clanName2">Requerimientos y licencias</h2>
                    <div class="clan-tag">#22G8YL992</div>
                </div>
                <div class="leader-info">
                    <h3>Líder:</h3>
                    <div id="leaderName2">Cargando...</div>
                    <div class="leader-tag" id="leaderTag2">Cargando...</div>
                </div>
            </div>

            <div class="donations-section">
                <div class="section-title">Donaciones totales de los miembros del clan</div>
                <div class="countdown-timer">
                    Última actualización: <span id="lastUpdateTotal">Cargando...</span>
                </div>
                
                <div class="donation-totals">
                    <div>Donaciones totales: <span id="totalDonated">Cargando...</span></div>
                    <div>Total recibido: <span id="totalReceived">Cargando...</span></div>
                </div>

                <div class="tab-buttons">
                    <button class="tab-btn active">Donaciones totales</button>
                </div>

                <div class="checkbox-container">
                    <input type="checkbox" id="rememberTab" checked>
                    <label for="rememberTab">Recordar la selección de pestañas</label>
                </div>

                <div class="player-list">
                    <div class="player-header">
                        <div>Rango</div>
                        <div>Liga</div>
                        <div>Nivel</div>
                        <div>Nombre del jugador</div>
                        <div>Donaciones totales ▼</div>
                        <div>Total recibido</div>
                    </div>
                    <div id="totalPlayersList">
                        <div class="loading">Cargando jugadores...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Página de Donaciones Diarias -->
    <div id="dailyDonationsPage" class="hidden">
        <div class="header">
            <h1>TOP REQ CLANS</h1>
        </div>
        <div class="nav-menu">
            <div class="nav-items">
                <a href="#">Level</a>
                <a href="#">Clans ▼</a>
                <a href="#">Players ▼</a>
                <a href="#">Contact</a>
            </div>
        </div>

        <div class="container">
            <div class="clan-header">
                <div class="clan-badge">⚔️</div>
                <div class="clan-info">
                    <h2>Requerimientos y licencias</h2>
                    <div class="clan-tag">#22G8YL992</div>
                </div>
                <div class="leader-info">
                    <h3>Líder:</h3>
                    <div id="leaderName3">Cargando...</div>
                    <div class="leader-tag" id="leaderTag3">Cargando...</div>
                </div>
            </div>

            <div class="donations-section">
                <div class="section-title">Donaciones diarias de los miembros del clan</div>
                <div class="countdown-timer">
                    Tiempo restante para que se restablezcan las donaciones diarias => <span id="dailyCountdown">Cargando...</span>
                </div>
                
                <div class="donation-totals">
                    <div>Donaciones diarias totales: <span id="dailyTotalDonated">Cargando...</span></div>
                    <div>Total diario recibido: <span id="dailyTotalReceived">Cargando...</span></div>
                </div>

                <div class="tab-buttons">
                    <button class="tab-btn active">Donaciones diarias</button>
                    <button class="tab-btn" style="background: #ddd; color: #666;">Totales</button>
                </div>

                <div class="checkbox-container">
                    <input type="checkbox" id="rememberTabDaily" checked>
                    <label for="rememberTabDaily">Recordar la selección de pestañas</label>
                </div>

                <div class="player-list">
                    <div class="player-header">
                        <div>Rango</div>
                        <div>Liga</div>
                        <div>Nivel</div>
                        <div>Nombre del jugador</div>
                        <div>Donaciones diarias ▼</div>
                        <div>Recibido diariamente</div>
                    </div>
                    <div id="dailyPlayersList">
                        <div class="loading">Cargando jugadores...</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Menú emergente -->
    <div id="menuOverlay" class="menu-overlay" onclick="hideMenu()">
        <div class="menu-content" onclick="event.stopPropagation()">
            <button class="close-btn" onclick="hideMenu()">×</button>
            <h2 class="menu-title">Opciones del Clan</h2>
            <button class="menu-button" onclick="showTotalDonations()">Ver Donaciones Totales</button>
            <button class="menu-button" onclick="showDailyDonations()">Ver Donaciones Diarias</button>
        </div>
    </div>

    <script>
        let clanData = null;
        let previousDonations = {};

        // Función para mostrar/ocultar páginas
        function showHome() {
            document.getElementById('homePage').classList.remove('hidden');
            document.getElementById('totalDonationsPage').classList.add('hidden');
            document.getElementById('dailyDonationsPage').classList.add('hidden');
            document.querySelector('.back-btn').classList.add('hidden');
        }

        function showMenu() {
            document.getElementById('menuOverlay').style.display = 'block';
        }

        function hideMenu() {
            document.getElementById('menuOverlay').style.display = 'none';
        }

        function showTotalDonations() {
            hideMenu();
            document.getElementById('homePage').classList.add('hidden');
            document.getElementById('totalDonationsPage').classList.remove('hidden');
            document.getElementById('dailyDonationsPage').classList.add('hidden');
            document.querySelector('.back-btn').classList.remove('hidden');
            loadTotalDonations();
        }

        function showDailyDonations() {
            hideMenu();
            document.getElementById('homePage').classList.add('hidden');
            document.getElementById('totalDonationsPage').classList.add('hidden');
            document.getElementById('dailyDonationsPage').classList.remove('hidden');
            document.querySelector('.back-btn').classList.remove('hidden');
            loadDailyDonations();
        }

        // Función para obtener datos del servidor
        async function fetchClanData() {
            try {
                const response = await fetch('/api/clan');
                if (!response.ok) {
                    throw new Error(`Error: ${response.status}`);
                }
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error fetching clan data:', error);
                updateStatusIndicator(false);
                return null;
            }
        }

        // Función para actualizar indicador de estado
        function updateStatusIndicator(online) {
            const indicator = document.getElementById('statusIndicator');
            if (online) {
                indicator.className = 'status-indicator status-online';
                indicator.textContent = '● Online';
            } else {
                indicator.className = 'status-indicator status-offline';
                indicator.textContent = '● Offline';
            }
        }

        // Función para actualizar la información del clan
        function updateClanInfo(data) {
            if (!data) return;
            
            clanData = data;
            document.getElementById('clanName').textContent = data.name || 'Clan sin nombre';
            document.getElementById('clanPoints').textContent = data.clanPoints?.toLocaleString() || '0';
            document.getElementById('clanLocation').textContent = data.location?.name || 'Sin ubicación';
            document.getElementById('requiredTrophies').textContent = data.requiredTrophies || '0';
            document.getElementById('chatLanguage').textContent = data.chatLanguage?.name || 'No especificado';
            document.getElementById('requiredTownHall').textContent = data.requiredTownhallLevel || '1';
            document.getElementById('clanType').textContent = data.type || 'abierto';
            document.getElementById('warFrequency').textContent = data.warFrequency || 'nunca';
            document.getElementById('warWins').textContent = data.warWins || '0';
            document.getElementById('warWinStreak').textContent = data.warWinStreak || '0';
            document.getElementById('capitalLevel').textContent = data.clanCapital?.capitalHallLevel || '1';
            document.getElementById('clanDescription').textContent = data.description || 'Sin descripción';
            
            // Líder
            const leader = data.memberList?.find(member => member.role === 'leader');
            if (leader) {
                document.getElementById('leaderName').textContent = leader.name;
                document.getElementById('leaderTag').textContent = leader.tag;
                document.getElementById('leaderName2').textContent = leader.name;
                document.getElementById('leaderTag2').textContent = leader.tag;
                document.getElementById('leaderName3').textContent = leader.name;
                document.getElementById('leaderTag3').textContent = leader.tag;
            }

            updateStatusIndicator(true);
        }

        // Función para cargar donaciones totales
        function loadTotalDonations() {
            if (!clanData) return;
            
            let totalDonated = 0;
            let totalReceived = 0;
            
            const playersList = document.getElementById('totalPlayersList');
            playersList.innerHTML = '';
            
            // Ordenar por donaciones totales (descendente)
            const sortedMembers = [...clanData.memberList].sort((a, b) => b.donations - a.donations);
            
            sortedMembers.forEach((member, index) => {
                totalDonated += member.donations;
                totalReceived += member.donationsReceived;
                
                const row = document.createElement('div');
                row.className = 'player-row';
                row.innerHTML = `
                    <div class="player-rank">${index + 1}.</div>
                    <div class="league-badge">${member.league?.name?.charAt(0) || 'U'}</div>
                    <div class="level-badge">${member.expLevel}</div>
                    <div>
                        <div class="player-name">${member.name}</div>
                        <div class="player-tag">${member.tag}</div>
                        <small style="color: #666;">${member.role}</small>
                    </div>
                    <div class="donation-amount">${member.donations.toLocaleString()}</div>
                    <div class="received-amount">${member.donationsReceived.toLocaleString()}</div>
                `;
                playersList.appendChild(row);
            });
            
            document.getElementById('totalDonated').textContent = totalDonated.toLocaleString();
            document.getElementById('totalReceived').textContent = totalReceived.toLocaleString();
            document.getElementById('lastUpdateTotal').textContent = new Date().toLocaleString();
        }

        // Función para cargar donaciones diarias
        async function loadDailyDonations() {
            if (!clanData) return;
            
            try {
                const response = await fetch('/api/daily-donations');
                const dailyData = await response.json();
                
                let dailyTotalDonated = 0;
                let dailyTotalReceived = 0;
                
                const playersList = document.getElementById('dailyPlayersList');
                playersList.innerHTML = '';
                
                // Ordenar por donaciones diarias (descendente)
                const sortedMembers = dailyData.sort((a, b) => b.dailyDonations - a.dailyDonations);
                
                sortedMembers.forEach((member, index) => {
                    dailyTotalDonated += member.dailyDonations;
                    dailyTotalReceived += member.dailyReceived;
                    
                    const row = document.createElement('div');
                    row.className = 'player-row';
                    row.innerHTML = `
                        <div class="player-rank">${index + 1}.</div>
                        <div class="league-badge">${member.league?.name?.charAt(0) || 'U'}</div>
                        <div class="level-badge">${member.expLevel}</div>
                        <div>
                            <div class="player-name">${member.name}</div>
                            <div class="player-tag">${member.tag}</div>
                            <small style="color: #666;">${member.role}</small>
                        </div>
                        <div class="donation-amount">${member.dailyDonations.toLocaleString()}</div>
                        <div class="received-amount">${member.dailyReceived.toLocaleString()}</div>
                    `;
                    playersList.appendChild(row);
                });
                
                document.getElementById('dailyTotalDonated').textContent = dailyTotalDonated.toLocaleString();
                document.getElementById('dailyTotalReceived').textContent = dailyTotalReceived.toLocaleString();
                
            } catch (error) {
                console.error('Error loading daily donations:', error);
                document.getElementById('dailyPlayersList').innerHTML = '<div class="loading">Error cargando datos diarios</div>';
            }
        }

        // Función para actualizar contador diario
        function updateDailyCountdown() {
            const now = new Date();
            
            // Calcular próximas 2 AM (hora Argentina - UTC-3)
            const tomorrow = new Date(now);
            tomorrow.setDate(tomorrow.getDate() + 1);
            tomorrow.setHours(2, 0, 0, 0);
            
            // Si ya pasaron las 2 AM de hoy, usar las 2 AM de mañana
            if (now.getHours() >= 2) {
                tomorrow.setDate(tomorrow.getDate() + 1);
            }
            
            const timeDiff = tomorrow - now;
            const hours = Math.floor(timeDiff / (1000 * 60 * 60));
            const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
            
            const countdown = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            const element = document.getElementById('dailyCountdown');
            if (element) {
                element.textContent = countdown;
            }
        }

        // Función principal para cargar datos
        async function loadData() {
            console.log('Cargando datos del clan...');
            const data = await fetchClanData();
            if (data) {
                updateClanInfo(data);
                console.log('Datos cargados correctamente');
            } else {
                console.error('Error al cargar datos del clan');
            }
        }

        // Inicializar la aplicación
        document.addEventListener('DOMContentLoaded', function() {
            loadData();
            
            // Actualizar datos cada 2 minutos
            setInterval(loadData, 120000); // 2 minutos
            
            // Actualizar contador diario cada segundo
            setInterval(updateDailyCountdown, 1000);
            
            // Inicializar contador
            updateDailyCountdown();
        });

        // Eventos de teclado para navegación
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                hideMenu();
                showHome();
            }
        });
    </script>
</body>
</html>"""

def fetch_clan_data():
    """Obtener datos del clan desde la API de Clash of Clans"""
    try:
        # URL encode del tag del clan
        encoded_tag = urllib.parse.quote(CLAN_TAG, safe='')
        url = f"https://api.clashofclans.com/v1/clans/{encoded_tag}"
        
        # Crear la petición
        req = urllib.request.Request(url)
        req.add_header('Authorization', f'Bearer {API_KEY}')
        req.add_header('Accept', 'application/json')
        
        # Realizar la petición
        with urllib.request.urlopen(req, timeout=10) as response:
            data = json.loads(response.read().decode('utf-8'))
            return data
            
    except Exception as e:
        print(f"Error al obtener datos del clan: {e}")
        return None

def calculate_daily_donations():
    """Calcular las donaciones diarias basándose en la diferencia con datos anteriores"""
    global clan_data, previous_donations
    
    if not clan_data or not clan_data.get('memberList'):
        return []
    
    daily_data = []
    
    for member in clan_data['memberList']:
        tag = member['tag']
        current_donations = member['donations']
        current_received = member['donationsReceived']
        
        # Obtener datos anteriores
        prev_data = previous_donations.get(tag, {
            'donations': current_donations,
            'received': current_received
        })
        
        # Calcular diferencia (donaciones diarias)
        daily_donations = max(0, current_donations - prev_data['donations'])
        daily_received = max(0, current_received - prev_data['received'])
        
        daily_data.append({
            **member,
            'dailyDonations': daily_donations,
            'dailyReceived': daily_received
        })
    
    return daily_data

def update_previous_donations():
    """Actualizar los datos anteriores para el cálculo de donaciones diarias"""
    global clan_data, previous_donations
    
    if not clan_data or not clan_data.get('memberList'):
        return
    
    for member in clan_data['memberList']:
        previous_donations[member['tag']] = {
            'donations': member['donations'],
            'received': member['donationsReceived']
        }

def reset_daily_data():
    """Resetear datos diarios (llamado a las 2 AM)"""
    global previous_donations
    previous_donations = {}
    print("Datos diarios reseteados a las 2 AM")

def check_daily_reset():
    """Verificar si es hora de resetear los datos diarios"""
    now = datetime.now()
    if now.hour == 2 and now.minute == 0:
        reset_daily_data()

def data_updater():
    """Hilo para actualizar datos cada 2 minutos"""
    global clan_data, last_update
    
    while True:
        try:
            print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] Actualizando datos del clan...")
            
            # Obtener nuevos datos
            new_data = fetch_clan_data()
            if new_data:
                clan_data = new_data
                last_update = datetime.now()
                print(f"✅ Datos actualizados correctamente. Miembros: {len(clan_data.get('memberList', []))}")
                
                # Actualizar datos anteriores para cálculo diario
                update_previous_donations()
            else:
                print("❌ Error al actualizar datos")
            
            # Verificar reset diario
            check_daily_reset()
            
        except Exception as e:
            print(f"❌ Error en actualización: {e}")
        
        # Esperar 2 minutos
        time.sleep(120)

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/' or self.path == '/index.html':
            # Servir la página principal
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            self.wfile.write(HTML_PAGE.encode('utf-8'))
            
        elif self.path == '/api/clan':
            # API endpoint para datos del clan
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            if clan_data:
                response = json.dumps(clan_data, ensure_ascii=False)
            else:
                response = json.dumps({"error": "No data available"})
            
            self.wfile.write(response.encode('utf-8'))
            
        elif self.path == '/api/daily-donations':
            # API endpoint para donaciones diarias
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            daily_data = calculate_daily_donations()
            response = json.dumps(daily_data, ensure_ascii=False)
            self.wfile.write(response.encode('utf-8'))
            
        elif self.path == '/api/status':
            # API endpoint para estado del servidor
            self.send_response(200)
            self.send_header('Content-type', 'application/json; charset=utf-8')
            self.send_header('Access-Control-Allow-Origin', '*')
            self.end_headers()
            
            status = {
                "status": "online" if clan_data else "offline",
                "last_update": last_update.isoformat() if last_update else None,
                "members_count": len(clan_data.get('memberList', [])) if clan_data else 0
            }
            
            response = json.dumps(status)
            self.wfile.write(response.encode('utf-8'))
            
        else:
            # 404 para otras rutas
            self.send_response(404)
            self.end_headers()
            self.wfile.write(b'404 - Not Found')

    def log_message(self, format, *args):
        """Personalizar logs del servidor"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{timestamp}] {format % args}")

def main():
    print("🚀 Iniciando servidor Clash of Clans...")
    print(f"📡 Puerto: {PORT}")
    print(f"🏰 Clan: {CLAN_TAG}")
    print("=" * 50)
    
    # Cargar datos iniciales
    print("📊 Cargando datos iniciales...")
    initial_data = fetch_clan_data()
    if initial_data:
        global clan_data, last_update
        clan_data = initial_data
        last_update = datetime.now()
        print(f"✅ Datos iniciales cargados. Clan: {clan_data.get('name', 'Sin nombre')}")
        print(f"👥 Miembros: {len(clan_data.get('memberList', []))}")
    else:
        print("❌ Error al cargar datos iniciales")
    
    # Iniciar hilo de actualización
    updater_thread = threading.Thread(target=data_updater, daemon=True)
    updater_thread.start()
    print("⏱️ Hilo de actualización iniciado (cada 2 minutos)")
    
    # Iniciar servidor web
    try:
        with socketserver.TCPServer(("", PORT), CustomHTTPRequestHandler) as httpd:
            print(f"🌐 Servidor ejecutándose en:")
            print(f"   📱 Local: http://localhost:{PORT}")
            print(f"   🌍 Red local: http://0.0.0.0:{PORT}")
            print("=" * 50)
            print("✨ ¡Servidor listo! Presiona Ctrl+C para detener")
            print("")
            
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print("\n🛑 Servidor detenido por el usuario")
    except Exception as e:
        print(f"❌ Error del servidor: {e}")

if __name__ == "__main__":
    main()
python -m http.server 8080

